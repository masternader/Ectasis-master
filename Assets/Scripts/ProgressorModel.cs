using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ProgressorModel {
    [RealtimeProperty(1, false, true)]
    private float _progressorSlider;
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class ProgressorModel : IModel {
    // Properties
    public float progressorSlider {
        get { return _progressorSlider; }
        set { if (value == _progressorSlider) return; _progressorSliderShouldWrite = true; _progressorSlider = value; FireProgressorSliderDidChange(value); }
    }
    
    // Events
    public delegate void ProgressorSliderDidChange(ProgressorModel model, float value);
    public event         ProgressorSliderDidChange progressorSliderDidChange;
    
    private bool _progressorSliderShouldWrite;
    
    public ProgressorModel() {
    }
    
    // Events
    public void FireProgressorSliderDidChange(float value) {
        try {
            if (progressorSliderDidChange != null)
                progressorSliderDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        ProgressorSlider = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.ProgressorSlider);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_progressorSliderShouldWrite) {
                    length += WriteStream.WriteFloatLength((uint)PropertyID.ProgressorSlider);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.ProgressorSlider, _progressorSlider);
            _progressorSliderShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_progressorSliderShouldWrite) {
                    stream.WriteFloat((uint)PropertyID.ProgressorSlider, _progressorSlider);
                    _progressorSliderShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.ProgressorSlider: {
                    float previousValue = _progressorSlider;
                    
                    _progressorSlider = stream.ReadFloat();
                    _progressorSliderShouldWrite = false;
                    
                    if (_progressorSlider != previousValue)
                        FireProgressorSliderDidChange(_progressorSlider);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
